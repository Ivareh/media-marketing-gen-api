services:
  oltp-db:
    image: postgres:12
    restart: always
    volumes:
      - media-market-oltp-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h $POSTGRES_SERVER -p $POSTGRES_PORT",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}


  vector-db:
    image: 'qdrant/qdrant:latest'
    restart: always
    env_file:
      - .env
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY?Variable not set}
    ports:
      - 6333:6333
    expose:
      - 6333
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - media-market-vector-data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "bash", "-c", ":>", "/dev/tcp/127.0.0.1/6333", "||", "exit", "1"]
      interval: 5s
      timeout: 5s
      retries: 5


  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      vector-db:
        condition: service_healthy
        restart: true
      oltp-db:
        condition: service_healthy
        restart: true
    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: sh -c "/app/prestart.sh && fastapi run --workers 4 app/main.py"
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - APP_CLIENT_ID=${APP_CLIENT_ID}
      - OPENAPI_CLIENT_ID=${OPENAPI_CLIENT_ID}
      - QDRANT_API_KEY=${QDRANT_API_KEY?Variable not set}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8000

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

      # Enable redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect



configs:
  qdrant_config:
    content: |
      log_level: INFO


volumes:
  media-market-oltp-data:
    name: "media-market-oltp-data"
  media-market-vector-data:
    name: "media-market-vector-data"



networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
